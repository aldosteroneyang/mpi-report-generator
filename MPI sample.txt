<!DOCTYPE html>
<html>

<head>
  <base target="_top">
  <style>
    body {
      font-family: 'Calibri', sans-serif;
      font-size: 12px;
    }

    .result-box {
      border: 1px solid #cccccc;
      padding: 10px;
      margin-bottom: 10px;
      overflow-wrap: break-word;
    }

    button {
      font-size: 12px;
      margin-bottom: 10px;
      padding: 5px 15px;
      width: 165px;
      height: 30px;
      text-align: left;
      overflow: hidden;
    }

    select {
      font-size: 12px;
      margin-bottom: 10px;
      padding: 5px 15px;
      width: 165px;
      height: 30px;
      text-align: left;
      overflow: hidden;
    }

    .notification {
      visibility: hidden;
      position: fixed;
      bottom: 5px;
      left: 5px;
      color: black;
      text-align: left;
      font-size: 12px;
      padding: 15px;
      z-index: 1;
    }

    .loading-gif {
      display: none;
      position: fixed;
      top: 70%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  </style>
  <script>
    function showGif(show) {
      var gif = document.getElementById('loadingGif');
      gif.style.display = show ? 'block' : 'none';
    }

    function copyReport(contentKey) {
      showGif(true);
      google.script.run.withSuccessHandler(function(results) {
        showGif(false);
        var persantin = document.getElementById('dropdownPersantin').value;
        var text = persantin === "true" ? results[contentKey] : results[contentKey].replace("stress", "initial");
        navigator.clipboard.writeText(text).then(function() {
          showNotification('Text copied to clipboard');
        })
        .catch(err => {
          showNotification('Error in copying text');
          console.error('Error in copying text: ', err);
        });
      }).updateReport();
    }

    function forbidDipyridamole(reason) {
      return "Persantin is not administered due to " + reason + ".";
    }

    function copyProcedure() {
      showGif(true);
      var valuePersantin = document.getElementById('dropdownPersantin').value;
      var valueAminophylline = document.getElementById('dropdownAminophylline').value;
      var valuesProcedure = [
        
      ]
      var valueCopy = 
      "1. Tl-201 myocardial perfusion scan is performed following vasodilator-stress with intravenous infusion of 0.56 mg/kg of persantin and 3 mCi of Tl-201.\n" +
      "2. Stress and redistribution imaging with SPECT technique are obtained by gamma camera with low energy high resolution collimator about 5 minutes and 4 hours after tracer injection, respectively.";

      if (valuePersantin !== 'true' && valueAminophylline !== 'true') {
        valueCopy = "Error: No persantin but with aminophylline administration."
      } else if (valuePersantin !== 'true') {
        valueCopy = 
        "1. Initial and redistribution imaging with SPECT technique are obtained by gamma camera with low energy high resolution collimator about 5 minutes and 4 hours after intravenous injection of 3 mCi Tl-201, respectively.\n" +
        "2. " + forbidDipyridamole(valuePersantin); 
      } else if (valueAminophylline !== 'true') {
        valueCopy = valueCopy + 
        "\n3. " + valueAminophylline + " of aminophylline 50 mg were administered to alleviate symptoms of headedness/chest tightness/general discomfort after the injection of persantin. The symptoms improved significantly."
      }
      navigator.clipboard.writeText(valueCopy).then(function() {
        showNotification('Value copied to clipboard');

        showGif(false);
      })
      .catch(err => {
        showNotification('Error in copying dropdown value');
        console.error('Error in copying dropdown value: ', err);
      });
    }

    function showNotification(message) {
      var notification = document.getElementById('notification');
      notification.innerText = message;
      notification.style.visibility = 'visible';

      setTimeout(function() {
        notification.style.visibility = 'hidden';
      }, 3000);
    }

    function clearValues() {
      document.getElementById('dropdownPersantin').value = "true";
      document.getElementById('dropdownAminophylline').value = "true";
      checkDropdownValue();
      google.script.run.withSuccessHandler(function() {
        showNotification('Values cleared');
      }).clear();
    }

    function duplicateStress() {
      google.script.run.withSuccessHandler(function() {
        showNotification('Values reset');
      }).copyStress();
    }

    function checkDropdownValue() {
      let dropdownPersantin = document.getElementById('dropdownPersantin');
      let dropdownAminophylline = document.getElementById('dropdownAminophylline');  
      let buttonCopyProcedure = document.getElementById('copyProcedure');

      if (dropdownPersantin.value !== "true" && dropdownAminophylline.value !== 'true') {
        dropdownPersantin.style.backgroundColor = 'pink';
        dropdownAminophylline.style.backgroundColor = 'pink';
        buttonCopyProcedure.style.backgroundColor = 'pink';
      } else if (dropdownPersantin.value !== 'true') {
        dropdownPersantin.style.backgroundColor = 'pink';
        dropdownAminophylline.style.backgroundColor = '';
        buttonCopyProcedure.style.backgroundColor = 'pink';
      } else if (dropdownAminophylline.value !== 'true') {
        dropdownPersantin.style.backgroundColor = '';
        dropdownAminophylline.style.backgroundColor = 'pink';
        buttonCopyProcedure.style.backgroundColor = 'pink';
      } else {
        dropdownPersantin.style.backgroundColor = '';
        dropdownAminophylline.style.backgroundColor = '';
        buttonCopyProcedure.style.backgroundColor = '';
      }

    }

    
  </script>


</head>

<body>
  <div>
    <select id="dropdownPersantin" onchange="checkDropdownValue()">
      <option value="true">Persantin</option>
      <option value="asthma">Hold (Asthma)</option>
      <option value="COPD">Hold (COPD)</option>
      <option value="reactive airway disease">Hold (RAD)</option>
      <option value="hypotension">Hold (Hypotension)</option>
      <option value="bradycardia">Hold (Bradycardia)</option>
      <option value="aortic stenosis">Hold (Aortic stenosis)</option>
      <option value="high grade AVB">Hold (High grade AVB)</option>
    </select>
  </div>
  <div>
    <select id="dropdownAminophylline" onchange="checkDropdownValue()">

      <option value="true">No aminophylline</option>
      <option value="One time">One time</option>
      <option value="Two times">Two times</option>
      <option value="Three times">Three times</option>

    </select>
  </div>
  <div>
    <button id="copyProcedure" onclick="copyProcedure()">Copy Procedure</button>
  </div>

  <div>
    <button onclick="copyReport('outputFindings')">Copy Findings</button>
  </div>
  <div>
    <button onclick="copyReport('outputImpression')">Copy Impression</button>
  </div>
  <div>
    <button onclick="clearValues()">Clear</button>
  </div>
  <button onclick="duplicateStress()">Duplicate Stress</button>


  <div id="notification" class="notification"></div>
  <img id="loadingGif" class="loading-gif" src="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExM3o4djVtb295Ym5pZ3Nxbms4MTl2YWhyZ3BjYnRtMXZ4eGY3NGVrdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/h7deZA51Ru9pwzlz0C/giphy.gif" />

</body>

</html>

###


// reason for persantin withdrawal
// (reason) -> str

// usage of aminophylline

// ([*times],[*complaints]) -> str
// One time of aminophylline 50 mg was administered for complaint of headache at post-15 mins of persantin administration. The symptom markedly improved.

// TL201 + persantin
// (drug, boolPersantin) -> str


// TL201 + no persantin

// 1.Initial and redistribution imaging with SPECT technique are obtained by gamma camera with low energy high resolution collimator about 5 minutes and 4 hours after intravenous injection of 3 mCi Tl-201, respectively.
// 2. Persantin is not administered due to suspicious COPD or asthma.

// Tc99m sestamibi + persantin

// 1. Tc-99m-sestamibi myocardial perfusion scan is performed following vasodilator-stress with intravenous infusion of 0.56 mg/kg of persantin and 15 mCi/ 25 mCi of Tc-99m-sestamibi.
// 2. Stress and rest imaging with SPECT technique are obtained by gamma camera with low energy high resolution collimator about 30 minutes after first and second injection of Tc-99m-sestamibi, with a 3 hours interval between the first and second injection.

// Tc99m sestamibi + no persantin

// 1. Tc-99m-sestamibi myocardial perfusion scan is performed with intravenous 15 mCi/ 25 mCi of Tc-99m-sestamibi.
// 2. Initial and rest imaging with SPECT technique are obtained by gamma camera with low energy high resolution collimator about 30 minutes after first and second injection of Tc-99m-sestamibi, with a 3 hours interval between the first and second injection.
// 3. Persantin is not administered due to suspicious COPD or asthma.

function addAmiophylline (reasons, timeDipyridamole, timesAmiophylline) {
  var times = timesAmiophylline.filter(x => x != "").length; 
  var dictionaryTimes = {1: "One dose",  2: "Two doses",  3: "Three doses"};
  return dictionaryTimes[times]
  + " of aminophylline 50 mg "+ (times == 1 ? "was " : "were ") 
  + "administered to alleviate " + (times == 1 ? "symptom" : "symptoms") + " of " + formatStringArray(reasons, txtSplit = "," ) + " after "
  + formatStringArray(timesAmiophylline.map(x => "" + (x - timeDipyridamole).toString()), txtSplit = "," ) + " minutes of persantin administration. "
  + "The " + (times == 1 ? "symptom" : "symptoms") + " improved significantly."
}

function test () {
  console.log(forbidDipyridamole(["COPD"]))
  console.log(addAmiophylline(['headache'], 20, [35, 48]))
}

function forbidDipyridamole(reasons) {
  return "Persantin is not administered due to " + formatStringArray(reasons,  txtSplit = "," ) + ".";
}

function showSidebar() {
  var html = HtmlService.createHtmlOutputFromFile('Page')
    .setTitle('Reports')
    .setWidth(150);
  SpreadsheetApp.getUi().showSidebar(html);
}

function copyStress() {
  var values = SpreadsheetApp.getActiveSpreadsheet().getRange("GUI!A2:AY51").getValues();
  SpreadsheetApp.getActiveSpreadsheet().getRange("GUI!A53:AY102").setValues(values);

}

function clear() {
  SpreadsheetApp.getActiveSpreadsheet().getRange("GUI!A1:AY103").clearContent();
}

function updateReport() {
  var valuesAll = SpreadsheetApp.getActiveSpreadsheet().getRange("GUI!1:103").getValues();

  var dic = { "": 0., "M": 1., "D": 2., "S": 3. };

  var valueStressApex = dic[valuesAll[24][23]];
  var valueStressBasalAnterior = dic[valuesAll[2][23]];
  var valueStressMiddleAnterior = dic[valuesAll[8][23]];
  var valueStressApicalAnterior = dic[valuesAll[15][23]];
  var valueStressBasalAnteroseptal = dic[valuesAll[11][5]];
  var valueStressMiddleAnteroseptal = dic[valuesAll[16][9]];
  var valueStressApicalAnteroseptal = dic[valuesAll[21][14]];
  var valueStressBasalInferoseptal = dic[valuesAll[37][5]];
  var valueStressMiddleInferoseptal = dic[valuesAll[32][9]];
  var valueStressApicalInferoseptal = dic[valuesAll[28][14]];
  var valueStressBasalInferior = dic[valuesAll[46][23]];
  var valueStressMiddleInfterior = dic[valuesAll[40][23]];
  var valueStressApicalInfterior = dic[valuesAll[33][23]];
  var valueStressBasalInferolateral = dic[valuesAll[37][41]];
  var valueStressMiddleInferolateral = dic[valuesAll[32][37]];
  var valueStressApicalInferolateral = dic[valuesAll[28][32]];
  var valueStressBasalAnterolateral = dic[valuesAll[11][41]];
  var valueStressMiddleAnterolateral = dic[valuesAll[16][37]];
  var valueStressApicalAnterolateral = dic[valuesAll[21][32]];

  var valueRestApex = dic[valuesAll[75][23]];
  var valueRestBasalAnterior = dic[valuesAll[53][23]];

  var valueRestMiddleAnterior = dic[valuesAll[59][23]];
  var valueRestApicalAnterior = dic[valuesAll[66][23]];

  var valueRestBasalAnteroseptal = dic[valuesAll[62][5]];
  var valueRestMiddleAnteroseptal = dic[valuesAll[67][9]];
  var valueRestApicalAnteroseptal = dic[valuesAll[72][14]];

  var valueRestBasalInferoseptal = dic[valuesAll[88][5]];
  var valueRestMiddleInferoseptal = dic[valuesAll[83][9]];
  var valueRestApicalInferoseptal = dic[valuesAll[79][14]];
  var valueRestBasalInferior = dic[valuesAll[97][23]];
  var valueRestMiddleInfterior = dic[valuesAll[91][23]];
  var valueRestApicalInfterior = dic[valuesAll[84][23]];

  var valueRestBasalInferolateral = dic[valuesAll[88][41]];
  var valueRestMiddleInferolateral = dic[valuesAll[83][37]];
  var valueRestApicalInferolateral = dic[valuesAll[79][32]];
  var valueRestBasalAnterolateral = dic[valuesAll[62][41]];
  var valueRestMiddleAnterolateral = dic[valuesAll[67][37]];
  var valueRestApicalAnterolateral = dic[valuesAll[72][32]];

  var valuesStressApex = [valueStressApex];
  var valuesStressAnterior = [valueStressBasalAnterior, valueStressMiddleAnterior, valueStressApicalAnterior];
  var valuesStressAnteroseptal = [valueStressBasalAnteroseptal, valueStressMiddleAnteroseptal, valueStressApicalAnteroseptal];
  var valuesStressInferoseptal = [valueStressBasalInferoseptal, valueStressMiddleInferoseptal, valueStressApicalInferoseptal];
  var valuesStressInferior = [valueStressBasalInferior, valueStressMiddleInfterior, valueStressApicalInfterior];
  var valuesStressInferolateral = [valueStressBasalInferolateral, valueStressMiddleInferolateral, valueStressApicalInferolateral];
  var valuesStressAnterolateral = [valueStressBasalAnterolateral, valueStressMiddleAnterolateral, valueStressApicalAnterolateral];

  var valuesRestApex = [valueRestApex];
  var valuesRestAnterior = [valueRestBasalAnterior, valueRestMiddleAnterior, valueRestApicalAnterior];
  var valuesRestAnteroseptal = [valueRestBasalAnteroseptal, valueRestMiddleAnteroseptal, valueRestApicalAnteroseptal];
  var valuesRestInferoseptal = [valueRestBasalInferoseptal, valueRestMiddleInferoseptal, valueRestApicalInferoseptal];
  var valuesRestInferior = [valueRestBasalInferior, valueRestMiddleInfterior, valueRestApicalInfterior];
  var valuesRestInferolateral = [valueRestBasalInferolateral, valueRestMiddleInferolateral, valueRestApicalInferolateral];
  var valuesRestAnterolateral = [valueRestBasalAnterolateral, valueRestMiddleAnterolateral, valueRestApicalAnterolateral];

  var dicStress = {
    "apex": valuesStressApex,
    "anterior": valuesStressAnterior,
    "anteroseptal": valuesStressAnteroseptal,
    "inferoseptal": valuesStressInferoseptal,
    "inferior": valuesStressInferior,
    "inferolateral": valuesStressInferolateral,
    "anterolateral": valuesStressAnterolateral
  }

  var dicRest = {
    "apex": valuesRestApex,
    "anterior": valuesRestAnterior,
    "anteroseptal": valuesRestAnteroseptal,
    "inferoseptal": valuesRestInferoseptal,
    "inferior": valuesRestInferior,
    "inferolateral": valuesRestInferolateral,
    "anterolateral": valuesRestAnterolateral
  }

  var regionStressLAD = ['anterior', 'anteroseptal', 'apex'].filter(x => dicStress[x].filter(y => y > 0).length > 0);
  var regionStressRCA = ['inferoseptal', 'inferior'].filter(x => dicStress[x].filter(y => y > 0).length > 0);
  var regionStressLCX = ['inferolateral', 'anterolateral'].filter(x => dicStress[x].filter(y => y > 0).length > 0);
  var regionRestLAD = ['anterior', 'anteroseptal', 'apex'].filter(x => dicRest[x].filter(y => y > 0).length > 0);
  var regionRestRCA = ['inferoseptal', 'inferior'].filter(x => dicRest[x].filter(y => y > 0).length > 0);
  var regionRestLCX = ['inferolateral', 'anterolateral'].filter(x => dicRest[x].filter(y => y > 0).length > 0);

  // calulate areas

  var areaStressApex = valueStressApex > 0 ? 1 : 0;
  var areaStressBasalAnterior = valueStressBasalAnterior > 0 ? 1 : 0;
  var areaStressMiddleAnterior = valueStressMiddleAnterior > 0 ? 1 : 0;
  var areaStressApicalAnterior = valueStressApicalAnterior > 0 ? 1 : 0;
  var areaStressBasalAnteroseptal = valueStressBasalAnteroseptal > 0 ? 1 : 0;
  var areaStressMiddleAnteroseptal = valueStressMiddleAnteroseptal > 0 ? 1 : 0;
  var areaStressApicalAnteroseptal = valueStressApicalAnteroseptal > 0 ? 0.5 : 0;

  var areaStressBasalInferoseptal = valueStressBasalInferoseptal > 0 ? 1 : 0;
  var areaStressMiddleInferoseptal = valueStressMiddleInferoseptal > 0 ? 1 : 0;
  var areaStressApicalInferoseptal = valueStressApicalInferoseptal > 0 ? 0.5 : 0;
  var areaStressBasalInferior = valueStressBasalInferior > 0 ? 1 : 0;
  var areaStressMiddleInfterior = valueStressMiddleInfterior > 0 ? 1 : 0;
  var areaStressApicalInfterior = valueStressApicalInfterior > 0 ? 1 : 0;

  var areaStressBasalInferolateral = valueStressBasalInferolateral > 0 ? 1 : 0;
  var areaStressMiddleInferolateral = valueStressMiddleInferolateral > 0 ? 1 : 0;
  var areaStressApicalInferolateral = valueStressApicalInferolateral > 0 ? 0.5 : 0;
  var areaStressBasalAnterolateral = valueStressBasalAnterolateral > 0 ? 1 : 0;
  var areaStressMiddleAnterolateral = valueStressMiddleAnterolateral > 0 ? 1 : 0;
  var areaStressApicalAnterolateral = valueStressApicalAnterolateral > 0 ? 0.5 : 0;

  var areaRestApex = valueRestApex > 0 ? 1 : 0;
  var areaRestBasalAnterior = valueRestBasalAnterior > 0 ? 1 : 0;
  var areaRestMiddleAnterior = valueRestMiddleAnterior > 0 ? 1 : 0;
  var areaRestApicalAnterior = valueRestApicalAnterior > 0 ? 1 : 0;
  var areaRestBasalAnteroseptal = valueRestBasalAnteroseptal > 0 ? 1 : 0;
  var areaRestMiddleAnteroseptal = valueRestMiddleAnteroseptal > 0 ? 1 : 0;
  var areaRestApicalAnteroseptal = valueRestApicalAnteroseptal > 0 ? 0.5 : 0;

  var areaRestBasalInferoseptal = valueRestBasalInferoseptal > 0 ? 1 : 0;
  var areaRestMiddleInferoseptal = valueRestMiddleInferoseptal > 0 ? 1 : 0;
  var areaRestApicalInferoseptal = valueRestApicalInferoseptal > 0 ? 0.5 : 0;
  var areaRestBasalInferior = valueRestBasalInferior > 0 ? 1 : 0;
  var areaRestMiddleInfterior = valueRestMiddleInfterior > 0 ? 1 : 0;
  var areaRestApicalInfterior = valueRestApicalInfterior > 0 ? 1 : 0;

  var areaRestBasalInferolateral = valueRestBasalInferolateral > 0 ? 1 : 0;
  var areaRestMiddleInferolateral = valueRestMiddleInferolateral > 0 ? 1 : 0;
  var areaRestApicalInferolateral = valueRestApicalInferolateral > 0 ? 0.5 : 0;
  var areaRestBasalAnterolateral = valueRestBasalAnterolateral > 0 ? 1 : 0;
  var areaRestMiddleAnterolateral = valueRestMiddleAnterolateral > 0 ? 1 : 0;
  var areaRestApicalAnterolateral = valueRestApicalAnterolateral > 0 ? 0.5 : 0;

  var areaStressLAD = areaStressApex + areaStressBasalAnterior + areaStressMiddleAnterior + areaStressApicalAnterior + areaStressBasalAnteroseptal + areaStressMiddleAnteroseptal + areaStressApicalAnteroseptal;
  var areaStressRCA = areaStressBasalInferoseptal + areaStressMiddleInferoseptal + areaStressApicalInferoseptal + areaStressBasalInferior + areaStressMiddleInfterior + areaStressApicalInfterior;
  var areaStressLCX = areaStressBasalInferolateral + areaStressMiddleInferolateral + areaStressApicalInferolateral + areaStressBasalAnterolateral + areaStressMiddleAnterolateral + areaStressApicalAnterolateral;
  var areaRestLAD = areaRestApex + areaRestBasalAnterior + areaRestMiddleAnterior + areaRestApicalAnterior + areaRestBasalAnteroseptal + areaRestMiddleAnteroseptal + areaRestApicalAnteroseptal;
  var areaRestRCA = areaRestBasalInferoseptal + areaRestMiddleInferoseptal + areaRestApicalInferoseptal + areaRestBasalInferior + areaRestMiddleInfterior + areaRestApicalInfterior;
  var areaRestLCX = areaRestBasalInferolateral + areaRestMiddleInferolateral + areaRestApicalInferolateral + areaRestBasalAnterolateral + areaRestMiddleAnterolateral + areaRestApicalAnterolateral;

  // calulate severities
  var severityStressLAD = valuesStressApex.concat(valuesStressAnterior).concat(valuesStressAnteroseptal);
  var severityStressRCA = valuesStressInferoseptal.concat(valuesStressInferior);
  var severityStressLCX = valuesStressInferolateral.concat(valuesStressAnterolateral);
  var severityRestLAD = valuesRestApex.concat(valuesRestAnterior).concat(valuesRestAnteroseptal);
  var severityRestRCA = valuesRestInferoseptal.concat(valuesRestInferior);
  var severityRestLCX = valuesRestInferolateral.concat(valuesRestAnterolateral);

  // Assuming findMinimum, findMaximum, and sumArray functions are already defined

  var severityStressLADString = sumArray(severityStressLAD) == 0 ? "0,0" : findMinimum(severityStressLAD.filter(x => x > 0)) + "," + findMaximum(severityStressLAD.filter(x => x > 0));
  var severityStressRCAString = sumArray(severityStressRCA) == 0 ? "0,0" : findMinimum(severityStressRCA.filter(x => x > 0)) + "," + findMaximum(severityStressRCA.filter(x => x > 0));
  var severityStressLCXString = sumArray(severityStressLCX) == 0 ? "0,0" : findMinimum(severityStressLCX.filter(x => x > 0)) + "," + findMaximum(severityStressLCX.filter(x => x > 0));
  var severityRestLADString = sumArray(severityRestLAD) == 0 ? "0,0" : findMinimum(severityRestLAD.filter(x => x > 0)) + "," + findMaximum(severityRestLAD.filter(x => x > 0));
  var severityRestRCAString = sumArray(severityRestRCA) == 0 ? "0,0" : findMinimum(severityRestRCA.filter(x => x > 0)) + "," + findMaximum(severityRestRCA.filter(x => x > 0));
  var severityRestLCXString = sumArray(severityRestLCX) == 0 ? "0,0" : findMinimum(severityRestLCX.filter(x => x > 0)) + "," + findMaximum(severityRestLCX.filter(x => x > 0));

  // Example of how to use these strings to get values from dicFindingsSeverity

  var dicFindingsSeverity = {
    "0,0": "",
    "1,1": "mildly decreased perfusion",
    "1,2": "mildly to moderately decreased perfusion",
    "1,3": "mildly to severely decreased perfusion",
    "2,2": "moderately decreased perfusion",
    "2,3": "moderately to severely decreased perfusion",
    "3,3": "severely decreased perfusion"
  };

  var findingStressLAD = severityStressLADString == "0,0" ? "" : dicFindingsSeverity[severityStressLADString] + " in " + regionStressLAD.join("/") + " (" + (areaStressLAD < 2.5 ? "small" : areaStressLAD < 4.5 ? "medium" : "large") + ")";
  var findingStressRCA = severityStressRCAString == "0,0" ? "" : dicFindingsSeverity[severityStressRCAString] + " in " + regionStressRCA.join("/") + " (" + (areaStressRCA < 2.5 ? "small" : areaStressRCA < 4.5 ? "medium" : "large") + ")";
  var findingStressLCX = severityStressLCXString == "0,0" ? "" : dicFindingsSeverity[severityStressLCXString] + " in " + regionStressLCX.join("/") + " (" + (areaStressLCX < 2.5 ? "small" : areaStressLCX < 4.5 ? "medium" : "large") + ")";

  var findingRestLAD = severityRestLADString == "0,0" ? "" : dicFindingsSeverity[severityRestLADString] + " in " + regionRestLAD.join("/") + " (" + (areaRestLAD < 2.5 ? "small" : areaRestLAD < 4.5 ? "medium" : "large") + ")";
  var findingRestRCA = severityRestRCAString == "0,0" ? "" : dicFindingsSeverity[severityRestRCAString] + " in " + regionRestRCA.join("/") + " (" + (areaRestRCA < 2.5 ? "small" : areaRestRCA < 4.5 ? "medium" : "large") + ")";
  var findingRestLCX = severityRestLCXString == "0,0" ? "" : dicFindingsSeverity[severityRestLCXString] + " in " + regionRestLCX.join("/") + " (" + (areaRestLCX < 2.5 ? "small" : areaRestLCX < 4.5 ? "medium" : "large") + ")";

  findingStressLAD = findingStressLAD == "" ? "" : findingStressLAD.includes("/") ? findingStressLAD + " regions" : findingStressLAD + " region";
  findingStressRCA = findingStressRCA == "" ? "" : findingStressRCA.includes("/") ? findingStressRCA + " regions" : findingStressRCA + " region";
  findingStressLCX = findingStressLCX == "" ? "" : findingStressLCX.includes("/") ? findingStressLCX + " regions" : findingStressLCX + " region";
  findingRestLAD = findingRestLAD == "" ? "" : findingRestLAD.includes("/") ? findingRestLAD + " regions" : findingRestLAD + " region";
  findingRestRCA = findingRestRCA == "" ? "" : findingRestRCA.includes("/") ? findingRestRCA + " regions" : findingRestRCA + " region";
  findingRestLCX = findingRestLCX == "" ? "" : findingRestLCX.includes("/") ? findingRestLCX + " regions" : findingRestLCX + " region";

  var findingStress = [findingStressLAD, findingStressRCA, findingStressLCX].filter(x => x != "");
  var dictionaryFindingStress = {};

  for (let i = 0; i < findingStress.length; i++) {
    let currentSeverity = findingStress[i].split(" in ")[0];
    let currentRegion = findingStress[i].split(" in ")[1];
    if (Object.keys(dictionaryFindingStress).includes(currentSeverity)) {
      dictionaryFindingStress[currentSeverity].push(currentRegion);
    } else {
      dictionaryFindingStress[currentSeverity] = [currentRegion];
    }
  }
  var severityOrder = ["severely decreased perfusion", "moderately to severely decreased perfusion", "moderately decreased perfusion", "mildly to severely decreased perfusion", "mildly to moderately decreased perfusion", "mildly decreased perfusion"];
  var severityGroupedFindings = [];
  for (let i = 0; i < severityOrder.length; i++) {
    if (Object.keys(dictionaryFindingStress).includes(severityOrder[i])) {
      severityGroupedFindings.push(severityOrder[i] + " in " + formatStringArray(dictionaryFindingStress[severityOrder[i]], txtSplit = ",", txtJucntion = "and"))
    }
  }

  var textSeverityGroupedFindings = severityGroupedFindings.join("; ");

  var differenceApex = valueRestApex - valueStressApex;
  var differenceBasalAnterior = valueRestBasalAnterior - valueStressBasalAnterior;
  var differenceMiddleAnterior = valueRestMiddleAnterior - valueStressMiddleAnterior;
  var differenceApicalAnterior = valueRestApicalAnterior - valueStressApicalAnterior;
  var differenceBasalAnteroseptal = valueRestBasalAnteroseptal - valueStressBasalAnteroseptal;
  var differenceMiddleAnteroseptal = valueRestMiddleAnteroseptal - valueStressMiddleAnteroseptal;
  var differenceApicalAnteroseptal = valueRestApicalAnteroseptal - valueStressApicalAnteroseptal;
  var differenceBasalInferoseptal = valueRestBasalInferoseptal - valueStressBasalInferoseptal;
  var differenceMiddleInferoseptal = valueRestMiddleInferoseptal - valueStressMiddleInferoseptal;
  var differenceApicalInferoseptal = valueRestApicalInferoseptal - valueStressApicalInferoseptal;
  var differenceBasalInferior = valueRestBasalInferior - valueStressBasalInferior;
  var differenceMiddleInfterior = valueRestMiddleInfterior - valueStressMiddleInfterior;
  var differenceApicalInfterior = valueRestApicalInfterior - valueStressApicalInfterior;
  var differenceBasalInferolateral = valueRestBasalInferolateral - valueStressBasalInferolateral;
  var differenceMiddleInferolateral = valueRestMiddleInferolateral - valueStressMiddleInferolateral;
  var differenceApicalInferolateral = valueRestApicalInferolateral - valueStressApicalInferolateral;
  var differenceBasalAnterolateral = valueRestBasalAnterolateral - valueStressBasalAnterolateral;
  var differenceMiddleAnterolateral = valueRestMiddleAnterolateral - valueStressMiddleAnterolateral;
  var differenceApicalAnterolateral = valueRestApicalAnterolateral - valueStressApicalAnterolateral;

  var differencesApex = [differenceApex];
  var differencesAnterior = [differenceBasalAnterior, differenceMiddleAnterior, differenceApicalAnterior];
  var differencesAnteroseptal = [differenceBasalAnteroseptal, differenceMiddleAnteroseptal, differenceApicalAnteroseptal];
  var differencesInferoseptal = [differenceBasalInferoseptal, differenceMiddleInferoseptal, differenceApicalInferoseptal];
  var differencesInferior = [differenceBasalInferior, differenceMiddleInfterior, differenceApicalInfterior];
  var differencesInferolateral = [differenceBasalInferolateral, differenceMiddleInferolateral, differenceApicalInferolateral];
  var differencesAnterolateral = [differenceBasalAnterolateral, differenceMiddleAnterolateral, differenceApicalAnterolateral];

  var differencesLAD = differencesApex.concat(differencesAnterior).concat(differencesAnteroseptal);
  var differencesRCA = differencesInferoseptal.concat(differencesInferior);
  var differencesLCX = differencesInferolateral.concat(differencesAnterolateral);

  // lesion regions of (Stress | Rest)
  var regionOverallLAD = mergeAndRemoveDuplicates(regionStressLAD, regionRestLAD);
  var regionOverallRCA = mergeAndRemoveDuplicates(regionStressRCA, regionRestRCA);
  var regionOverallLCX = mergeAndRemoveDuplicates(regionStressLCX, regionRestLCX);

  var areaOverallLAD =
    Math.max(areaStressApex, areaRestApex) +
    Math.max(areaStressBasalAnterior, areaRestBasalAnterior) +
    Math.max(areaStressMiddleAnterior, areaRestMiddleAnterior) +
    Math.max(areaStressApicalAnterior, areaRestApicalAnterior) +
    Math.max(areaStressBasalAnteroseptal, areaRestBasalAnteroseptal) +
    Math.max(areaStressMiddleAnteroseptal, areaRestMiddleAnteroseptal) +
    Math.max(areaStressApicalAnteroseptal, areaRestApicalAnteroseptal);

  var areaOverallRCA =
    Math.max(areaStressBasalInferoseptal, areaRestBasalInferoseptal) +
    Math.max(areaStressMiddleInferoseptal, areaRestMiddleInferoseptal) +
    Math.max(areaStressApicalInferoseptal, areaRestApicalInferoseptal) +
    Math.max(areaStressBasalInferior, areaRestBasalInferior) +
    Math.max(areaStressMiddleInfterior, areaRestMiddleInfterior) +
    Math.max(areaStressApicalInfterior, areaRestApicalInfterior);

  var areaOverallLCX =
    Math.max(areaStressBasalInferolateral, areaRestBasalInferolateral) +
    Math.max(areaStressMiddleInferolateral, areaRestMiddleInferolateral) +
    Math.max(areaStressApicalInferolateral, areaRestApicalInferolateral) +
    Math.max(areaStressBasalAnterolateral, areaRestBasalAnterolateral) +
    Math.max(areaStressMiddleAnterolateral, areaRestMiddleAnterolateral) +
    Math.max(areaStressApicalAnterolateral, areaRestApicalAnterolateral);

  var severityOverallLAD = compareArraysAndReturnLargerElements(severityStressLAD, severityRestLAD);
  var severityOverallRCA = compareArraysAndReturnLargerElements(severityStressRCA, severityRestRCA);
  var severityOverallLCX = compareArraysAndReturnLargerElements(severityStressLCX, severityRestLCX);

  var severityOverallLADString = sumArray(severityOverallLAD) == 0 ? "0,0" : findMinimum(severityOverallLAD.filter(x => x > 0)) + "," + findMaximum(severityOverallLAD.filter(x => x > 0));
  var severityOverallRCAString = sumArray(severityOverallRCA) == 0 ? "0,0" : findMinimum(severityOverallRCA.filter(x => x > 0)) + "," + findMaximum(severityOverallRCA.filter(x => x > 0));
  var severityOverallLCXString = sumArray(severityOverallLCX) == 0 ? "0,0" : findMinimum(severityOverallLCX.filter(x => x > 0)) + "," + findMaximum(severityOverallLCX.filter(x => x > 0));

  var textDifferencesLAD =
    findingStressLAD == "" ? findingRestLAD :
      isAnyElementGreaterThanZero(differencesLAD) && !isAnyElementLessThanZero(differencesLAD) ? "progression of " + findingRestLAD :
        isAnyElementGreaterThanZero(differencesLAD) ? "partial redistribution while partial progression of " + dicFindingsSeverity[severityOverallLADString] + " in " + regionOverallLAD.join("/") + " (" + (areaOverallLAD < 2.5 ? "small" : areaOverallLAD < 4.5 ? "medium" : "large") + ")" + (regionOverallLAD.length > 1 ? " regions" : " region") :
          !isAnyElementGreaterThanZero(differencesLAD) && !isAnyElementLessThanZero(differencesLAD) ? "no redistribution in " + regionOverallLAD.join("/") + (regionOverallLAD.length > 1 ? " regions" : " region") :
            !isAnyElementGreaterThanZero(differencesLAD) && sumArray(severityRestLAD) == 0 ? "complete redistribution in " + regionOverallLAD.join("/") + (regionOverallLAD.length > 1 ? " regions" : " region") :
              "partial redistribution in " + regionOverallLAD.join("/") + (regionOverallLAD.length > 1 ? " regions" : " region");



  var textDifferencesRCA =
    findingStressRCA == "" ? findingRestRCA :
      isAnyElementGreaterThanZero(differencesRCA) && !isAnyElementLessThanZero(differencesRCA) ? "progression of " + findingRestRCA :
        isAnyElementGreaterThanZero(differencesRCA) ? "partial redistribution while partial progression of " + dicFindingsSeverity[severityOverallRCAString] + " in " + regionOverallRCA.join("/") + " (" + (areaOverallRCA < 2.5 ? "small" : areaOverallRCA < 4.5 ? "medium" : "large") + ")" + (regionOverallRCA.length > 1 ? " regions" : " region") :
          !isAnyElementGreaterThanZero(differencesRCA) && !isAnyElementLessThanZero(differencesRCA) ? "no redistribution in " + regionOverallRCA.join("/") + (regionOverallRCA.length > 1 ? " regions" : " region") :
            !isAnyElementGreaterThanZero(differencesRCA) && sumArray(severityRestRCA) == 0 ? "complete redistribution in " + regionOverallRCA.join("/") + (regionOverallRCA.length > 1 ? " regions" : " region") :
              "partial redistribution in " + regionOverallRCA.join("/") + (regionOverallRCA.length > 1 ? " regions" : " region");



  var textDifferencesLCX =
    findingStressLCX == "" ? findingRestLCX :
      isAnyElementGreaterThanZero(differencesLCX) && !isAnyElementLessThanZero(differencesLCX) ? "progression of " + findingRestLCX :
        isAnyElementGreaterThanZero(differencesLCX) ? "partial redistribution while partial progression of " + dicFindingsSeverity[severityOverallLCXString] + " in " + regionOverallLCX.join("/") + " (" + (areaOverallLCX < 2.5 ? "small" : areaOverallLCX < 4.5 ? "medium" : "large") + ")" + (regionOverallLCX.length > 1 ? " regions" : " region") :
          !isAnyElementGreaterThanZero(differencesLCX) && !isAnyElementLessThanZero(differencesLCX) ? "no redistribution in " + regionOverallLCX.join("/") + (regionOverallLCX.length > 1 ? " regions" : " region") :
            !isAnyElementGreaterThanZero(differencesLCX) && sumArray(severityRestLCX) == 0 ? "complete redistribution in " + regionOverallLCX.join("/") + (regionOverallLCX.length > 1 ? " regions" : " region") :
              "partial redistribution in " + regionOverallLCX.join("/") + (regionOverallLCX.length > 1 ? " regions" : " region");

  var dictionaryDifferences = {};

  for (let i of [textDifferencesLAD, textDifferencesRCA, textDifferencesLCX]) {

    let currentDifference = i.split(" in ")[0];
    let currentRegion = i.split(" in ")[1];
    if (Object.keys(dictionaryDifferences).includes(currentDifference)) {
      dictionaryDifferences[currentDifference].push(currentRegion);
    } else {
      dictionaryDifferences[currentDifference] = [currentRegion];
    }

  }


  differenceOrder = [
    "progression of severely decreased perfusion",
    "progression of moderately to severely decreased perfusion",
    "progression of moderately decreased perfusion",
    "progression of mildly to severely decreased perfusion",
    "progression of mildly to moderately decreased perfusion",
    "progression of mildly decreased perfusion",
    "partial redistribution while partial progression of severely decreased perfusion",
    "partial redistribution while partial progression of moderately to severely decreased perfusion",
    "partial redistribution while partial progression of moderately decreased perfusion",
    "partial redistribution while partial progression of mildly to severely decreased perfusion",
    "partial redistribution while partial progression of mildly to moderately decreased perfusion",
    "partial redistribution while partial progression of mildly decreased perfusion",
    "no redistribution",
    "partial redistribution",
    "complete redistribution",
    "severely decreased perfusion",
    "moderately to severely decreased perfusion",
    "moderately decreased perfusion",
    "mildly to severely decreased perfusion",
    "mildly to moderately decreased perfusion",
    "mildly decreased perfusion",
  ]

  // var flagJoin = false;
  var differencesGroupedFindings = [];
  var differencesGroupedFindingsNew = [];
  for (let i of differenceOrder) {
    if (Object.keys(dictionaryDifferences).includes(i)) {
      differencesGroupedFindings.push(i + " in " + formatStringArray(dictionaryDifferences[i], txtSplit = ",", txtJucntion = "and"))
    }
  }



  var variantsProgression = differencesGroupedFindings.filter(x => x.slice(0, 11) == "progression");
  var polyProgression = variantsProgression.filter(x => x.includes("and")).length > 0;
  var differencesGroupedProgressionFindings = formatStringArray(variantsProgression.map(x => x.replace("progression of ", "")), txtSplit = ",", txtJucntion = (polyProgression ? ", and" : "and")).replace(" ,", ",");
  if (differencesGroupedProgressionFindings.length > 0) {
    differencesGroupedFindingsNew.push("progression of " + differencesGroupedProgressionFindings);
  }

  var variantsWhile = differencesGroupedFindings.filter(x => x.includes("partial redistribution while"));

  var polyWhile = variantsWhile.filter(x => x.includes("and")).length > 0;
  var differencesGroupedWhileFindings = formatStringArray(variantsWhile.map(x => x.replace("partial redistribution while partial progression of ", "")), txtSplit = ";", txtJucntion = (polyWhile ? ", and" : "and")).replace(" ,", ",");
  if (differencesGroupedWhileFindings.length > 0) {
    differencesGroupedFindingsNew.push("partial redistribution while partial progression of " + differencesGroupedWhileFindings);
  }
  differencesGroupedFindingsNew = differencesGroupedFindingsNew
    .concat(differencesGroupedFindings.filter(x => x.includes("no redistribution")))
    .concat(differencesGroupedFindings.filter(x => x.split(" in ")[0] == "partial redistribution"))
    .concat(differencesGroupedFindings.filter(x => x.includes("complete redistribution")))


  var variantsReverse = differencesGroupedFindings.filter(x => ["sev", "mod", "mil"].includes(x.slice(0, 3)));
  var polyReverse = variantsReverse.filter(x => x.includes("and")).length > 0;
  var differencesGroupedReverseFindings = formatStringArray(variantsReverse, txtSplit = ";", txtJucntion = (polyReverse ? ", and" : "and")).replace(" ,", ",");
  if (differencesGroupedReverseFindings.length > 0) {
    differencesGroupedFindingsNew.push(differencesGroupedReverseFindings);
  }
  
  var textDifferencesGroupedFindings = differencesGroupedFindingsNew.join("; ");

  // return impression

  var impressionLAD =
    textDifferencesLAD == "" ? "" :
      textDifferencesLAD.includes("progression") ? textDifferencesLAD.split(" of ")[1].replace("decreased perfusion", "mixed viable and non-viable myocardial tissues") :
        textDifferencesLAD.includes("complete") ? textDifferencesLAD.replace("complete redistribution", dicFindingsSeverity[severityOverallLADString].replace(" decreased perfusion", "") + " myocardial ischemia").replace("region", "(" + (areaOverallLAD < 2.5 ? "small" : areaOverallLAD < 4.5 ? "medium" : "large") + ") region") :
          textDifferencesLAD.includes("partial") ? textDifferencesLAD.replace("partial redistribution", dicFindingsSeverity[severityOverallLADString].replace(" decreased perfusion", "") + " mixed viable and non-viable myocardial tissues").replace("region", "(" + (areaOverallLAD < 2.5 ? "small" : areaOverallLAD < 4.5 ? "medium" : "large") + ") region") :
            textDifferencesLAD.includes("no ") ? textDifferencesLAD.replace("no redistribution", dicFindingsSeverity[severityOverallLADString].replace(" decreased perfusion", "") + " non-viable myocardial tissues").replace("region", "(" + (areaOverallLAD < 2.5 ? "small" : areaOverallLAD < 4.5 ? "medium" : "large") + ") region") :
              textDifferencesLAD.replace("decreased perfusion", "reverse redistribution");

  var impressionRCA =
    textDifferencesRCA == "" ? "" :
      textDifferencesRCA.includes("progression") ? textDifferencesRCA.split(" of ")[1].replace("decreased perfusion", "mixed viable and non-viable myocardial tissues") :
        textDifferencesRCA.includes("complete") ? textDifferencesRCA.replace("complete redistribution", dicFindingsSeverity[severityOverallRCAString].replace(" decreased perfusion", "") + " myocardial ischemia").replace("region", "(" + (areaOverallRCA < 2.5 ? "small" : areaOverallRCA < 4.5 ? "medium" : "large") + ") region") :
          textDifferencesRCA.includes("partial") ? textDifferencesRCA.replace("partial redistribution", dicFindingsSeverity[severityOverallRCAString].replace(" decreased perfusion", "") + " mixed viable and non-viable myocardial tissues").replace("region", "(" + (areaOverallRCA < 2.5 ? "small" : areaOverallRCA < 4.5 ? "medium" : "large") + ") region") :
            textDifferencesRCA.includes("no ") ? textDifferencesRCA.replace("no redistribution", dicFindingsSeverity[severityOverallRCAString].replace(" decreased perfusion", "") + " non-viable myocardial tissues").replace("region", "(" + (areaOverallRCA < 2.5 ? "small" : areaOverallRCA < 4.5 ? "medium" : "large") + ") region") :
              textDifferencesRCA.replace("decreased perfusion", "reverse redistribution");

  var impressionLCX =
    textDifferencesLCX == "" ? "" :
      textDifferencesLCX.includes("progression") ? textDifferencesLCX.split(" of ")[1].replace("decreased perfusion", "mixed viable and non-viable myocardial tissues") :
        textDifferencesLCX.includes("complete") ? textDifferencesLCX.replace("complete redistribution", dicFindingsSeverity[severityOverallLCXString].replace(" decreased perfusion", "") + " myocardial ischemia").replace("region", "(" + (areaOverallLCX < 2.5 ? "small" : areaOverallLCX < 4.5 ? "medium" : "large") + ") region") :
          textDifferencesLCX.includes("partial") ? textDifferencesLCX.replace("partial redistribution", dicFindingsSeverity[severityOverallLCXString].replace(" decreased perfusion", "") + " mixed viable and non-viable myocardial tissues").replace("region", "(" + (areaOverallLCX < 2.5 ? "small" : areaOverallLCX < 4.5 ? "medium" : "large") + ") region") :
            textDifferencesLCX.includes("no ") ? textDifferencesLCX.replace("no redistribution", dicFindingsSeverity[severityOverallLCXString].replace(" decreased perfusion", "") + " non-viable myocardial tissues").replace("region", "(" + (areaOverallLCX < 2.5 ? "small" : areaOverallLCX < 4.5 ? "medium" : "large") + ") region") :
              textDifferencesLCX.replace("decreased perfusion", "reverse redistribution");

  // var outputFindings = [findingStressLAD, findingStressRCA, findingStressLCX].filter(x => x != "").join("; ");

  var outputFindings = textSeverityGroupedFindings;
  outputFindings = outputFindings == "" ? "no perfusion defect" : outputFindings;
  outputFindings = "The stress images disclosed " + outputFindings + ".\n";

  outputFindings = outputFindings
    + "The delayed images disclosed "
    + textDifferencesGroupedFindings + ".";
  // + [textDifferencesLAD, textDifferencesRCA, textDifferencesLCX].filter(x => x != "").join("; ") + ".";

  outputFindings = outputFindings.includes("The delayed images disclosed .") ? "The stress and delayed images disclosed no perfusion defect." : outputFindings;

  var scoreLAD = sumArray(valuesStressApex.concat(valuesStressAnterior).concat(valuesStressAnteroseptal)) * 4 + sumArray(valuesRestApex.concat(valuesRestAnterior).concat(valuesRestAnteroseptal));
  var scoreRCA = sumArray(valuesStressInferoseptal.concat(valuesStressInferior)) * 4 + sumArray(valuesRestInferoseptal.concat(valuesRestInferior));
  var scoreLCX = sumArray(valuesStressInferolateral.concat(valuesStressAnterolateral)) * 4 + sumArray(valuesRestInferolateral.concat(valuesRestAnterolateral));

  let impressions = [impressionLAD, impressionRCA, impressionLCX];
  let scores = [scoreLAD, scoreRCA, scoreLCX];

  // Combine the arrays into an array of objects
  let combined = impressions.map((impression, index) => {
    return { impression: impression, score: scores[index] };
  });

  // Sort the combined array based on the scores
  combined.sort((a, b) => b.score - a.score);

  // Extract the sorted impressions
  let sortedImpressions = combined.map(item => item.impression);

  var dictionaryImpressions = {};

  for (let i of sortedImpressions) {
    let currentSeverity = i.split(" in ")[0];
    let currentRegion = i.split(" in ")[1];

    if (Object.keys(dictionaryImpressions).includes(currentSeverity)) {
      dictionaryImpressions[currentSeverity].push(currentRegion);
    } else {
      dictionaryImpressions[currentSeverity] = [currentRegion];
    }
  }

  var finalImpressions = [];
  for (let i of Object.keys(dictionaryImpressions)) {
    if (i.length > 0) {
      finalImpressions.push(i + " in " + formatStringArray(dictionaryImpressions[i], txtSplit = ",", txtJucntion = "and"));
    }
  }

  var outputImpression = prefixArrayElementsWithIndex(finalImpressions.filter(x => x != "").map(x => capitalizeFirstCharacter(x.replace("mildly", "mild").replace("moderately", "moderate").replace("severely", "severe")) + ".")).join("\n");

  outputImpression = outputImpression == "" ? "Normal myocardial perfusion study." : outputImpression.includes("2. ") ? outputImpression : outputImpression.replace("1. ", "");

  return {
    'outputFindings': outputFindings,
    'outputImpression': outputImpression
  }
}

function sumArray(arr) {
  return arr.reduce(function (accumulator, currentValue) {
    return accumulator + currentValue;
  }, 0);
}

function findMinimum(arr) {
  return arr.reduce(function (min, currentValue) {
    return (currentValue < min) ? currentValue : min;
  });
}

function findMaximum(arr) {
  return arr.reduce(function (max, currentValue) {
    return (currentValue > max) ? currentValue : max;
  });
}

function formatStringArray(arr, txtSplit = ";", txtJucntion = "and") {
  let length = arr.length;

  if (length === 0) {
    return "";
  } else if (length === 1) {
    return arr[0];
  } else if (length === 2) {
    return arr[0] + " " + txtJucntion + " " + arr[1];
  } else {
    return arr.slice(0, -1).join(txtSplit + " ") + txtSplit + " " + txtJucntion + " " + arr[length - 1];
  }
}

function isAnyElementGreaterThanZero(arr) {
  return arr.some(function (element) {
    return element > 0;
  });
}

function isAnyElementLessThanZero(arr) {
  return arr.some(function (element) {
    return element < 0;
  });
}

function mergeAndRemoveDuplicates(arr1, arr2) {
  return Array.from(new Set(arr1.concat(arr2)));
}

function compareArraysAndReturnLargerElements(arr1, arr2) {
  return arr1.map((element, index) => Math.max(element, arr2[index]));
}

function capitalizeFirstCharacter(sentence) {
  if (sentence && typeof sentence === 'string') {
    return sentence.charAt(0).toUpperCase() + sentence.slice(1);
  } else {
    return '';
  }
}

function prefixArrayElementsWithIndex(arr) {
  return arr.map((element, index) => `${index + 1}. ${element}`);
}
