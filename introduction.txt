# GUI 報告產生器擴充功能 - 患者資料整合指南

## 概述

本文檔說明如何在報告生成器視窗中接收和處理從原始頁面傳送的患者資訊。擴充功能會自動從頁面中提取患者基本資料（性別、年齡、報告編號、病患編號等），並將其傳送到報告生成器視窗中，提供更完整的報告生成體驗。

## 患者資料傳輸機制

擴充功能使用 LocalStorage 方式將患者資料傳送到報告生成器視窗：

1. **LocalStorage 傳輸** (主要方式)：資料被存儲在瀏覽器的 LocalStorage 中，然後通過一個唯一 ID 在頁面間共享

這種方法的優點：
- 可以處理較大的數據量，無URL長度限制
- 不會觸發頁面導航，保持與原始頁面的連結
- 數據不會被發送到服務器，更安全
- 實現簡單，兼容性好

## 接收患者資料的方法

要在您的報告生成器頁面中接收這些資料，請在 JavaScript 檔案中添加以下代碼：

```javascript
// 當文檔完成載入時執行
document.addEventListener('DOMContentLoaded', function() {
    console.log('報告生成器：頁面已載入，開始檢查數據');
    
    // 解析URL fragment獲取傳輸ID
    const fragmentString = window.location.hash.substring(1);
    console.log('報告生成器：URL fragment:', fragmentString);
    
    // 解析fragment參數
    const params = new URLSearchParams(fragmentString);
    const transferId = params.get('transferId');
    
    if (transferId) {
        console.log('報告生成器：找到傳輸ID:', transferId);
        
        // 嘗試從LocalStorage獲取數據
        try {
            const storedData = localStorage.getItem(transferId);
            
            if (storedData) {
                console.log('報告生成器：從LocalStorage獲取數據成功');
                
                // 解析JSON數據
                const data = JSON.parse(storedData);
                console.log('報告生成器：解析後的數據對象:', data);
                
                // 處理數據
                processReceivedData(data);
                
                // 可選：處理完數據後從LocalStorage中刪除
                // localStorage.removeItem(transferId);
            } else {
                console.error('報告生成器：LocalStorage中沒有找到對應數據');
                showErrorMessage('無法獲取患者資料，請重試。');
            }
        } catch (e) {
            console.error('報告生成器：從LocalStorage獲取數據時出錯:', e);
            showErrorMessage('解析患者資料時出錯，請檢查控制台錯誤。');
        }
    } else {
        console.log('報告生成器：URL中沒有找到傳輸ID');
    }
    
    // 顯示錯誤消息的函數
    function showErrorMessage(message) {
        try {
            const errorDiv = document.createElement('div');
            errorDiv.style.color = 'red';
            errorDiv.style.padding = '10px';
            errorDiv.style.margin = '10px 0';
            errorDiv.style.border = '1px solid red';
            errorDiv.style.borderRadius = '5px';
            errorDiv.style.backgroundColor = '#fff0f0';
            errorDiv.textContent = '資料載入錯誤: ' + message;
            
            document.body.insertBefore(errorDiv, document.body.firstChild);
        } catch (e) {
            console.error('報告生成器：無法顯示錯誤消息:', e);
        }
    }
    
    // 處理接收到的數據
    function processReceivedData(data) {
        console.log('報告生成器：處理接收到的數據');
        
        // 處理MCIID
        if (data.mciid) {
            console.log('報告生成器：接收到MCIID:', data.mciid);
            // 在這裡可以更新頁面上的MCIID
            const mciidElement = document.getElementById('mciid');
            if (mciidElement) {
                mciidElement.textContent = data.mciid;
                mciidElement.value = data.mciid;
            }
        }
        
        // 處理患者資訊
        if (data.patientInfo) {
            console.log('報告生成器：接收到患者資訊');
            handlePatientInfo(data.patientInfo);
        }
        
        // 處理文本值
        if (data.textValues) {
            console.log('報告生成器：接收到文本值');
            // 尋找頁面上的文本區域
            const textareas = document.querySelectorAll('textarea');
            if (textareas.length > 0) {
                if (Array.isArray(data.textValues)) {
                    // 按順序填充
                    for (let i = 0; i < Math.min(textareas.length, data.textValues.length); i++) {
                        if (data.textValues[i]) {
                            textareas[i].value = data.textValues[i];
                        }
                    }
                } else if (typeof data.textValues === 'object') {
                    // 按名稱填充
                    for (const [key, value] of Object.entries(data.textValues)) {
                        const textarea = document.querySelector(`textarea[name="${key}"], textarea#${key}`);
                        if (textarea) {
                            textarea.value = value;
                        }
                    }
                }
            }
        }
    }
});

// 處理患者資訊的函數 - 更加穩健的版本
function handlePatientInfo(patientInfo) {
    if (!patientInfo) {
        console.error('報告生成器：收到空的患者資訊');
        return;
    }
    
    console.log('報告生成器：處理患者資訊:', patientInfo);
    
    try {
        // 獲取性別資訊，並做標準化處理
        let genderText = '';
        if (patientInfo.gender) {
            // 將數字或代碼轉換為文字
            if (patientInfo.gender === '1' || patientInfo.gender.toLowerCase() === 'm' || patientInfo.gender.includes('男')) {
                genderText = '男';
            } else if (patientInfo.gender === '2' || patientInfo.gender.toLowerCase() === 'f' || patientInfo.gender.includes('女')) {
                genderText = '女';
            } else {
                genderText = patientInfo.gender; // 使用原始值
            }
        }
        
        // 獲取年齡資訊
        const age = patientInfo.age || '';
        
        // 獲取報告編號
        const referno = patientInfo.referno || '';
        
        // 獲取病患編號
        const patno = patientInfo.patno || '';
        
        // 方法1: 填入對應的輸入欄位
        fillInputFields(genderText, age, referno, patno);
        
        // 方法2: 在頁面上顯示患者資訊
        displayPatientInfo(genderText, age, referno, patno);
        
    } catch (e) {
        console.error('報告生成器：處理患者資訊時出錯:', e);
    }
}

// 填入欄位函數
function fillInputFields(gender, age, referno, patno) {
    try {
        // 嘗試找到並填入性別欄位
        const genderElement = document.querySelector('input[name="gender"], #gender, .gender-input');
        if (genderElement) {
            genderElement.value = gender;
            console.log('報告生成器：已填入性別:', gender);
        }
        
        // 嘗試找到並填入年齡欄位
        const ageElement = document.querySelector('input[name="age"], #age, .age-input');
        if (ageElement) {
            ageElement.value = age;
            console.log('報告生成器：已填入年齡:', age);
        }
        
        // 嘗試找到並填入報告編號欄位
        const refernoElement = document.querySelector('input[name="referno"], #referno, .referno-input');
        if (refernoElement) {
            refernoElement.value = referno;
            console.log('報告生成器：已填入報告編號:', referno);
        }
        
        // 嘗試找到並填入病患編號欄位
        const patnoElement = document.querySelector('input[name="patno"], #patno, .patno-input');
        if (patnoElement) {
            patnoElement.value = patno;
            console.log('報告生成器：已填入病患編號:', patno);
        }
    } catch (e) {
        console.error('報告生成器：填入欄位時出錯:', e);
    }
}

// 顯示患者資訊函數
function displayPatientInfo(gender, age, referno, patno) {
    try {
        // 找到或創建顯示患者資訊的區塊
        let patientInfoDiv = document.getElementById('patient-info');
        
        // 如果不存在，則創建一個
        if (!patientInfoDiv) {
            console.log('報告生成器：創建患者資訊顯示區塊');
            patientInfoDiv = document.createElement('div');
            patientInfoDiv.id = 'patient-info';
            patientInfoDiv.className = 'patient-info-container';
            
            // 找一個合適的位置插入
            const insertTarget = document.querySelector('body > div:first-child') || document.body;
            insertTarget.insertBefore(patientInfoDiv, insertTarget.firstChild);
        }
        
        // 填入患者資訊
        let html = '<h3>患者資訊</h3>';
        if (gender) html += `<p>性別: ${gender}</p>`;
        if (age) html += `<p>年齡: ${age}</p>`;
        if (referno) html += `<p>報告編號: ${referno}</p>`;
        if (patno) html += `<p>病患編號: ${patno}</p>`;
        
        patientInfoDiv.innerHTML = html;
        console.log('報告生成器：已顯示患者資訊');
        
        // 添加樣式
        if (!document.getElementById('patient-info-style')) {
            const style = document.createElement('style');
            style.id = 'patient-info-style';
            style.textContent = `
                .patient-info-container {
                    border: 1px solid #ddd;
                    border-radius: 5px;
                    padding: 10px;
                    margin-bottom: 20px;
                    background-color: #f9f9f9;
                }
                .patient-info-container h3 {
                    margin-top: 0;
                    color: #333;
                    border-bottom: 1px solid #eee;
                    padding-bottom: 5px;
                }
                .patient-info-container p {
                    margin: 5px 0;
                }
            `;
            document.head.appendChild(style);
        }
    } catch (e) {
        console.error('報告生成器：顯示患者資訊時出錯:', e);
    }
}
```

## 簡單的HTML範例

在您的HTML中添加以下元素以顯示患者資訊和接收數據：

```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>報告生成器</title>
    <script>
        // 這裡粘貼上方的JavaScript代碼
    </script>
</head>
<body>
    <!-- 患者資訊將被自動填入下方區塊 -->
    <div id="patient-info" class="patient-info-container">
        <!-- 患者資訊將由JavaScript動態填入 -->
    </div>
    
    <!-- 表單欄位範例 -->
    <div class="form-container">
        <form id="report-form">
            <div class="form-group">
                <label>性別:</label>
                <input type="text" id="gender" name="gender" class="gender-input">
            </div>
            <div class="form-group">
                <label>年齡:</label>
                <input type="text" id="age" name="age" class="age-input">
            </div>
            <div class="form-group">
                <label>報告編號:</label>
                <input type="text" id="referno" name="referno" class="referno-input">
            </div>
            <div class="form-group">
                <label>病患編號:</label>
                <input type="text" id="patno" name="patno" class="patno-input">
            </div>
        </form>
    </div>
</body>
</html>
```

## 使用 LocalStorage 的優點

1. **處理大量數據**: 不受URL長度限制，可處理較大的文本數據
2. **不干擾頁面導航**: 不會觸發頁面重新加載或導航
3. **保持與原始頁面的連接**: 不會破壞與原始頁面的連結關係
4. **安全**: 數據只存儲在本地瀏覽器，不會被發送到服務器
5. **自動清理**: 設置了5分鐘自動清理機制，避免佔用過多存儲空間

## 使用注意事項

1. **同源限制**: LocalStorage 受同源策略限制，確保報告生成器與原始頁面在同一域名下
2. **存儲空間**: 每個域名的 LocalStorage 存儲空間大約有 5-10MB，足夠大多數使用場景
3. **清理機制**: 數據會在 5 分鐘後自動清理，確保不會長期佔用存儲空間
4. **數據格式**: 使用 JSON 格式存儲和傳輸，確保數據類型一致性
5. **錯誤處理**: 添加了完善的錯誤處理機制，確保在各種情況下仍能正常工作

## 測試方法

您可以使用以下方法測試患者資料整合功能:

1. **控制台手動測試**: 在瀏覽器控制台中執行:
   ```javascript
   // 模擬接收患者資訊
   handlePatientInfo({
     gender: '1',
     age: '65',
     referno: '931133P02950',
     patno: '12345'
   });
   ```

2. **擴充功能測試**: 啟用擴充功能並點擊「開啟報告生成器」按鈕，擴充功能會自動處理數據傳輸

## 故障排除

如遇問題，請檢查:

1. **控制台日誌**: 檢查瀏覽器控制台中的詳細日誌訊息
2. **LocalStorage**: 使用開發者工具 Application > Storage > Local Storage 檢查是否包含患者數據
3. **跨域問題**: 確認報告生成器與原始頁面在同一域名下
4. **存儲空間**: 確認 LocalStorage 空間是否足夠，可能需要清理一些舊數據

---

如有任何問題或需要技術支援，請聯繫擴充功能開發團隊。 